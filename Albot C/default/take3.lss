
take3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000015  00800100  00800100  000005d8  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f8  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000039f  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000204  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000473  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a5  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d6  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_2>
   c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_3>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 31       	cpi	r26, 0x15	; 21
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  ac:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <main>:

int SearchCount;				//define integer use to determine search counter
int NoteCount;

int main(void)
{	
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
    Motor_Init();
  c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Motor_Init>
	PID_Init();
  c4:	0e 94 08 01 	call	0x210	; 0x210 <PID_Init>
	SetPIDInput(0,0);
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 92 01 	call	0x324	; 0x324 <SetPIDInput>

	DDRB = 0xFF;		//[1111 1111] Set Port B as outputs - 0xFF data direction register B
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x80;		//[1000 0000] Set PORTC bits 0 to 6 as inputs and bit 7 as output 
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x7f;		//[0111 1111] Set internal pull-ups and bit 7 to 0
  dc:	8f e7       	ldi	r24, 0x7F	; 127
  de:	85 bb       	out	0x15, r24	; 21
	
	PORTC &= ~(1<<7);  //set PORTC pin7 handshake bit to a 0
  e0:	af 98       	cbi	0x15, 7	; 21
	PORTB &= ~(1<<7);  //set PORTB pin7 LED off
  e2:	c7 98       	cbi	0x18, 7	; 24
	const int LineFollowSpeed = -40; // The line follower optical detectors are on the back!
	unsigned char Command;
	int RgtWheelSpeed  = 0;
	int LftWheelSpeed  = 0;
	
	sei(); 						// Set Interrupts (switch on interrupts)
  e4:	78 94       	sei
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	e9 2e       	mov	r14, r25
  f2:	f1 2c       	mov	r15, r1
	int Search=1;				//define interger used to determine whether the line has been found since power on
		
	for(;;) { 					// Execute infinite loop (at high speed)
	
		Command = PINC;         // Read from FPGA ...
  f4:	83 b3       	in	r24, 0x13	; 19
		PORTB = Command;		// ... reflect input to ALbot LEDs
  f6:	88 bb       	out	0x18, r24	; 24

		PORTC= Command; 		//send the same data to the motorcontroller PID
  f8:	85 bb       	out	0x15, r24	; 21

		if ( PIDInterruptFlag ) { // If the 250Hz timer interrupt has fired and set the
  fa:	80 91 04 01 	lds	r24, 0x0104
  fe:	88 23       	and	r24, r24
 100:	c9 f3       	breq	.-14     	; 0xf4 <main+0x40>
								   
								   // ... send control to the motors
								
								   // ... but first reset the flag ...
	
			cli();                 // Clear interrupts (switch off interrupts)
 102:	f8 94       	cli
			PIDInterruptFlag = 0;  // Clear interrupt flag
 104:	10 92 04 01 	sts	0x0104, r1
			sei();                 // Set interrupts (switch on interrupts)
 108:	78 94       	sei
				{
						LftWheelSpeed =  -60; 					//wide circular turn to search for a line
						RgtWheelSpeed =  -40;												
				}
			}	*/
			if(PORTC== 3 || PORTC == 1){ 								//If both opto sensors are on the black line
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	19 f0       	breq	.+6      	; 0x116 <main+0x62>
 110:	85 b3       	in	r24, 0x15	; 21
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	59 f4       	brne	.+22     	; 0x12c <main+0x78>
					LftWheelSpeed =  -60;				//Both wheels forward at -110 for extra speed on striaghts
					RgtWheelSpeed =  -60;		
					Search=0;								//indicator variable: line has been found 
					SearchCount=0;
 116:	10 92 01 01 	sts	0x0101, r1
 11a:	10 92 00 01 	sts	0x0100, r1
 11e:	04 ec       	ldi	r16, 0xC4	; 196
 120:	1f ef       	ldi	r17, 0xFF	; 255
 122:	c4 ec       	ldi	r28, 0xC4	; 196
 124:	df ef       	ldi	r29, 0xFF	; 255
 126:	ee 24       	eor	r14, r14
 128:	ff 24       	eor	r15, r15
 12a:	4f c0       	rjmp	.+158    	; 0x1ca <main+0x116>
			}else if(PORTC == 2 || PORTC == 0){
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	49 f0       	breq	.+18     	; 0x144 <main+0x90>
 132:	85 b3       	in	r24, 0x15	; 21
 134:	88 23       	and	r24, r24
 136:	31 f0       	breq	.+12     	; 0x144 <main+0x90>
					Search=1;	
			}

		//*******************************************Line lost routine here*************************************************************************
			if(Search == 1){
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	e2 16       	cp	r14, r18
 13c:	f1 04       	cpc	r15, r1
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0x8e>
 140:	44 c0       	rjmp	.+136    	; 0x1ca <main+0x116>
 142:	03 c0       	rjmp	.+6      	; 0x14a <main+0x96>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	e8 2e       	mov	r14, r24
 148:	f1 2c       	mov	r15, r1
				if(PORTC== 2){
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	a1 f4       	brne	.+40     	; 0x178 <main+0xc4>
					if(SearchCount <= 250){
 150:	80 91 00 01 	lds	r24, 0x0100
 154:	90 91 01 01 	lds	r25, 0x0101
 158:	8b 3f       	cpi	r24, 0xFB	; 251
 15a:	91 05       	cpc	r25, r1
 15c:	6c f1       	brlt	.+90     	; 0x1b8 <main+0x104>
						RgtWheelSpeed =  0; 					//left turn to search for a line
						LftWheelSpeed =  -60;
						SearchCount++;
					}else if(SearchCount <= 750){
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	8f 3e       	cpi	r24, 0xEF	; 239
 162:	92 07       	cpc	r25, r18
 164:	dc f0       	brlt	.+54     	; 0x19c <main+0xe8>
						RgtWheelSpeed =  -60; 					//right turn to search for a line
						LftWheelSpeed =  0;
						SearchCount++;
					}else if(SearchCount <= 1500){
 166:	25 e0       	ldi	r18, 0x05	; 5
 168:	8d 3d       	cpi	r24, 0xDD	; 221
 16a:	92 07       	cpc	r25, r18
 16c:	2c f1       	brlt	.+74     	; 0x1b8 <main+0x104>
						RgtWheelSpeed =  0; 					//left turn to search for a line
						LftWheelSpeed =  -60;
						SearchCount++;
					}else if(SearchCount <= 2500){
 16e:	29 e0       	ldi	r18, 0x09	; 9
 170:	85 3c       	cpi	r24, 0xC5	; 197
 172:	92 07       	cpc	r25, r18
 174:	54 f5       	brge	.+84     	; 0x1ca <main+0x116>
 176:	12 c0       	rjmp	.+36     	; 0x19c <main+0xe8>
						RgtWheelSpeed =  -60; 					//right turn to search for a line
						LftWheelSpeed =  0;
						SearchCount++;
					}
				}else if(PORTC == 0){
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	88 23       	and	r24, r24
 17c:	31 f5       	brne	.+76     	; 0x1ca <main+0x116>
					if(SearchCount <= 250){
 17e:	80 91 00 01 	lds	r24, 0x0100
 182:	90 91 01 01 	lds	r25, 0x0101
 186:	8b 3f       	cpi	r24, 0xFB	; 251
 188:	91 05       	cpc	r25, r1
 18a:	44 f0       	brlt	.+16     	; 0x19c <main+0xe8>
						RgtWheelSpeed =  -60; 					//right turn to search for a line
						LftWheelSpeed =  0;
						SearchCount++;
					}else if(SearchCount <= 750){
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	8f 3e       	cpi	r24, 0xEF	; 239
 190:	92 07       	cpc	r25, r18
 192:	94 f0       	brlt	.+36     	; 0x1b8 <main+0x104>
						RgtWheelSpeed =  0; 					//left turn to search for a line
						LftWheelSpeed =  -60;
						SearchCount++;
					}else if(SearchCount <= 1500){
 194:	25 e0       	ldi	r18, 0x05	; 5
 196:	8d 3d       	cpi	r24, 0xDD	; 221
 198:	92 07       	cpc	r25, r18
 19a:	54 f4       	brge	.+20     	; 0x1b0 <main+0xfc>
						RgtWheelSpeed =  -60; 					//right turn to search for a line
						LftWheelSpeed =  0;
						SearchCount++;
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 01 01 	sts	0x0101, r25
 1a2:	80 93 00 01 	sts	0x0100, r24
 1a6:	04 ec       	ldi	r16, 0xC4	; 196
 1a8:	1f ef       	ldi	r17, 0xFF	; 255
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <main+0x116>
					}else if(SearchCount <= 2500){
 1b0:	29 e0       	ldi	r18, 0x09	; 9
 1b2:	85 3c       	cpi	r24, 0xC5	; 197
 1b4:	92 07       	cpc	r25, r18
 1b6:	4c f4       	brge	.+18     	; 0x1ca <main+0x116>
						RgtWheelSpeed =  0; 					//left turn to search for a line
						LftWheelSpeed =  -60;
						SearchCount++;
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 01 01 	sts	0x0101, r25
 1be:	80 93 00 01 	sts	0x0100, r24
 1c2:	00 e0       	ldi	r16, 0x00	; 0
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	c4 ec       	ldi	r28, 0xC4	; 196
 1c8:	df ef       	ldi	r29, 0xFF	; 255
					}
				}
			}

			SetPIDInput ( LftWheelSpeed, RgtWheelSpeed );	//Request the speed for the PID to achieve	
 1ca:	ce 01       	movw	r24, r28
 1cc:	b8 01       	movw	r22, r16
 1ce:	0e 94 92 01 	call	0x324	; 0x324 <SetPIDInput>
			PIDHeartBeat();									//Let it do its work adjusting the voltages to achieve the given speed	
 1d2:	0e 94 9b 01 	call	0x336	; 0x336 <PIDHeartBeat>
		//*******************************************NEXT SEND BACK INFORMATION ON WHETHER NOTE IS ON AND OFF**************************************
			if(PORTC== 3 || PORTC == 2){ 								//If both opto sensors are on the black line
 1d6:	85 b3       	in	r24, 0x15	; 21
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	19 f0       	breq	.+6      	; 0x1e2 <main+0x12e>
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	31 f4       	brne	.+12     	; 0x1ee <main+0x13a>
					NoteCount++;
 1e2:	80 91 02 01 	lds	r24, 0x0102
 1e6:	90 91 03 01 	lds	r25, 0x0103
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <main+0x152>
			}else if(PORTC == 1 || PORTC == 0){
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	21 f0       	breq	.+8      	; 0x1fc <main+0x148>
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	88 23       	and	r24, r24
 1f8:	09 f0       	breq	.+2      	; 0x1fc <main+0x148>
 1fa:	7c cf       	rjmp	.-264    	; 0xf4 <main+0x40>
					NoteCount--;
 1fc:	80 91 02 01 	lds	r24, 0x0102
 200:	90 91 03 01 	lds	r25, 0x0103
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	90 93 03 01 	sts	0x0103, r25
 20a:	80 93 02 01 	sts	0x0102, r24
 20e:	72 cf       	rjmp	.-284    	; 0xf4 <main+0x40>

00000210 <PID_Init>:

void PID_Init (void)
{
	/* Timer0 is for the PID Controller */
	
	TCCR0 = 0x07;  // Use 1024 prescaler on Timer 0 pdf p.105 (this actually sets to 128. For 1024, should be 0x07 with atmega128 
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01;  // Enable timer (overflow interrupt enabled. Same on ATMEGA128) 
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	87 bf       	out	0x37, r24	; 55

	PIDInterruptFlag = 0;
 218:	10 92 04 01 	sts	0x0104, r1
	
	LM.EncCnt     = 0;  RM.EncCnt     = 0;
 21c:	10 92 10 01 	sts	0x0110, r1
 220:	10 92 0f 01 	sts	0x010F, r1
 224:	10 92 08 01 	sts	0x0108, r1
 228:	10 92 07 01 	sts	0x0107, r1
	LM.EncCnt_Old = 0;  RM.EncCnt_Old = 0;
 22c:	10 92 12 01 	sts	0x0112, r1
 230:	10 92 11 01 	sts	0x0111, r1
 234:	10 92 0a 01 	sts	0x010A, r1
 238:	10 92 09 01 	sts	0x0109, r1
	LM.Vin        = 0;  RM.Vin        = 0;
 23c:	10 92 14 01 	sts	0x0114, r1
 240:	10 92 13 01 	sts	0x0113, r1
 244:	10 92 0c 01 	sts	0x010C, r1
 248:	10 92 0b 01 	sts	0x010B, r1
}
 24c:	08 95       	ret

0000024e <__vector_16>:

SIGNAL(SIG_OVERFLOW0)		//PID Controller sampling
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
    cli();
 25c:	f8 94       	cli
	
	TCNT0=TMRRESET;
 25e:	82 ec       	ldi	r24, 0xC2	; 194
 260:	82 bf       	out	0x32, r24	; 50

	LM.EncCnt = LM.RawIntCnt;
 262:	80 91 0d 01 	lds	r24, 0x010D
 266:	90 91 0e 01 	lds	r25, 0x010E
 26a:	90 93 10 01 	sts	0x0110, r25
 26e:	80 93 0f 01 	sts	0x010F, r24
	RM.EncCnt = RM.RawIntCnt;
 272:	80 91 05 01 	lds	r24, 0x0105
 276:	90 91 06 01 	lds	r25, 0x0106
 27a:	90 93 08 01 	sts	0x0108, r25
 27e:	80 93 07 01 	sts	0x0107, r24
	LM.RawIntCnt = 0;
 282:	10 92 0e 01 	sts	0x010E, r1
 286:	10 92 0d 01 	sts	0x010D, r1
	RM.RawIntCnt = 0;
 28a:	10 92 06 01 	sts	0x0106, r1
 28e:	10 92 05 01 	sts	0x0105, r1

	PIDInterruptFlag = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 04 01 	sts	0x0104, r24
	
	sei();	
 298:	78 94       	sei
}
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_2>:

SIGNAL(SIG_INTERRUPT1)  // Left wheel shaft encoder interrupt
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
	if (PIND & '\x40'){ // Check wheel direction status bit
 2b6:	86 9b       	sbis	0x10, 6	; 16
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <__vector_2+0x1e>
		LM.RawIntCnt--;
 2ba:	80 91 0d 01 	lds	r24, 0x010D
 2be:	90 91 0e 01 	lds	r25, 0x010E
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__vector_2+0x28>
	}else{
		LM.RawIntCnt++;
 2c6:	80 91 0d 01 	lds	r24, 0x010D
 2ca:	90 91 0e 01 	lds	r25, 0x010E
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 0e 01 	sts	0x010E, r25
 2d4:	80 93 0d 01 	sts	0x010D, r24
	}	
}
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_3>:

SIGNAL(SIG_INTERRUPT2)  // Right wheel shaft encoder interrupt
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
	if (PIND & '\x80'){ // Check wheel direction status bit
 2f4:	87 9b       	sbis	0x10, 7	; 16
 2f6:	06 c0       	rjmp	.+12     	; 0x304 <__vector_3+0x1e>
		RM.RawIntCnt++;
 2f8:	80 91 05 01 	lds	r24, 0x0105
 2fc:	90 91 06 01 	lds	r25, 0x0106
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	05 c0       	rjmp	.+10     	; 0x30e <__vector_3+0x28>
	}else{
		RM.RawIntCnt--;
 304:	80 91 05 01 	lds	r24, 0x0105
 308:	90 91 06 01 	lds	r25, 0x0106
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	90 93 06 01 	sts	0x0106, r25
 312:	80 93 05 01 	sts	0x0105, r24
	}
}
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <SetPIDInput>:

void SetPIDInput ( int LftMotorSpeed,int RgtMotorSpeed )
{
	LM.Vin = LftMotorSpeed;
 324:	90 93 14 01 	sts	0x0114, r25
 328:	80 93 13 01 	sts	0x0113, r24
	RM.Vin = RgtMotorSpeed;
 32c:	70 93 0c 01 	sts	0x010C, r23
 330:	60 93 0b 01 	sts	0x010B, r22
}
 334:	08 95       	ret

00000336 <PIDHeartBeat>:

void PIDHeartBeat(void)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
	if( (LM.Vin==0) && (RM.Vin==0) ){
 33a:	80 91 13 01 	lds	r24, 0x0113
 33e:	90 91 14 01 	lds	r25, 0x0114
 342:	89 2b       	or	r24, r25
 344:	09 f0       	breq	.+2      	; 0x348 <PIDHeartBeat+0x12>
 346:	3f c0       	rjmp	.+126    	; 0x3c6 <PIDHeartBeat+0x90>
 348:	80 91 0b 01 	lds	r24, 0x010B
 34c:	90 91 0c 01 	lds	r25, 0x010C
 350:	89 2b       	or	r24, r25
 352:	c9 f5       	brne	.+114    	; 0x3c6 <PIDHeartBeat+0x90>
	
		// Hold the position
		
		int EL = (0 - sfactor(LM.EncCnt));
 354:	80 91 0f 01 	lds	r24, 0x010F
 358:	90 91 10 01 	lds	r25, 0x0110
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	cc 27       	eor	r28, r28
 366:	dd 27       	eor	r29, r29
 368:	c8 1b       	sub	r28, r24
 36a:	d9 0b       	sbc	r29, r25
		int ER = (0 - sfactor(RM.EncCnt));
 36c:	80 91 07 01 	lds	r24, 0x0107
 370:	90 91 08 01 	lds	r25, 0x0108
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	ee 27       	eor	r30, r30
 37e:	ff 27       	eor	r31, r31
 380:	e8 1b       	sub	r30, r24
 382:	f9 0b       	sbc	r31, r25

		if((EL < NoiseThresHold)&&(EL > -NoiseThresHold)){ EL = EL/4;}	// deadband
 384:	ce 01       	movw	r24, r28
 386:	4b 96       	adiw	r24, 0x1b	; 27
 388:	c7 97       	sbiw	r24, 0x37	; 55
 38a:	30 f4       	brcc	.+12     	; 0x398 <PIDHeartBeat+0x62>
 38c:	ce 01       	movw	r24, r28
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 89 02 	call	0x512	; 0x512 <__divmodhi4>
 396:	eb 01       	movw	r28, r22
        if((ER < NoiseThresHold)&&(ER > -NoiseThresHold)){ ER = ER/4;}
 398:	cf 01       	movw	r24, r30
 39a:	4b 96       	adiw	r24, 0x1b	; 27
 39c:	c7 97       	sbiw	r24, 0x37	; 55
 39e:	30 f4       	brcc	.+12     	; 0x3ac <PIDHeartBeat+0x76>
 3a0:	cf 01       	movw	r24, r30
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	0e 94 89 02 	call	0x512	; 0x512 <__divmodhi4>
 3aa:	fb 01       	movw	r30, r22
		
		SetSpeed(	HKp * EL,HKp * ER);
 3ac:	54 e0       	ldi	r21, 0x04	; 4
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	5a 95       	dec	r21
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <PIDHeartBeat+0x78>
 3b6:	ce 01       	movw	r24, r28
 3b8:	44 e0       	ldi	r20, 0x04	; 4
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	4a 95       	dec	r20
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <PIDHeartBeat+0x84>
 3c2:	bf 01       	movw	r22, r30
 3c4:	51 c0       	rjmp	.+162    	; 0x468 <PIDHeartBeat+0x132>
		
	}else{
	
		// Robot is moving
		
		int EL = (LM.Vin - sfactor(LM.EncCnt));
 3c6:	c0 91 13 01 	lds	r28, 0x0113
 3ca:	d0 91 14 01 	lds	r29, 0x0114
 3ce:	80 91 0f 01 	lds	r24, 0x010F
 3d2:	90 91 10 01 	lds	r25, 0x0110
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	c8 1b       	sub	r28, r24
 3e0:	d9 0b       	sbc	r29, r25
		int ER = (RM.Vin - sfactor(RM.EncCnt));
 3e2:	e0 91 0b 01 	lds	r30, 0x010B
 3e6:	f0 91 0c 01 	lds	r31, 0x010C
 3ea:	80 91 07 01 	lds	r24, 0x0107
 3ee:	90 91 08 01 	lds	r25, 0x0108
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	e8 1b       	sub	r30, r24
 3fc:	f9 0b       	sbc	r31, r25
		if( LM.EncCnt - LM.EncCnt_Old >= 2){
 3fe:	80 91 0f 01 	lds	r24, 0x010F
 402:	90 91 10 01 	lds	r25, 0x0110
 406:	20 91 11 01 	lds	r18, 0x0111
 40a:	30 91 12 01 	lds	r19, 0x0112
 40e:	82 1b       	sub	r24, r18
 410:	93 0b       	sbc	r25, r19
 412:	02 97       	sbiw	r24, 0x02	; 2
 414:	34 f0       	brlt	.+12     	; 0x422 <PIDHeartBeat+0xec>
			EL = EL/8;
 416:	ce 01       	movw	r24, r28
 418:	68 e0       	ldi	r22, 0x08	; 8
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	0e 94 89 02 	call	0x512	; 0x512 <__divmodhi4>
 420:	eb 01       	movw	r28, r22
		}
		if( RM.EncCnt - RM.EncCnt_Old >= 2){
 422:	80 91 07 01 	lds	r24, 0x0107
 426:	90 91 08 01 	lds	r25, 0x0108
 42a:	20 91 09 01 	lds	r18, 0x0109
 42e:	30 91 0a 01 	lds	r19, 0x010A
 432:	82 1b       	sub	r24, r18
 434:	93 0b       	sbc	r25, r19
 436:	02 97       	sbiw	r24, 0x02	; 2
 438:	34 f0       	brlt	.+12     	; 0x446 <PIDHeartBeat+0x110>
			ER = ER/8;
 43a:	cf 01       	movw	r24, r30
 43c:	68 e0       	ldi	r22, 0x08	; 8
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	0e 94 89 02 	call	0x512	; 0x512 <__divmodhi4>
 444:	fb 01       	movw	r30, r22
		}
		
		SetSpeed(	(VKp+3) * EL,		(VKp+3) * ER);
 446:	83 e1       	ldi	r24, 0x13	; 19
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	e8 9f       	mul	r30, r24
 44c:	b0 01       	movw	r22, r0
 44e:	e9 9f       	mul	r30, r25
 450:	70 0d       	add	r23, r0
 452:	f8 9f       	mul	r31, r24
 454:	70 0d       	add	r23, r0
 456:	11 24       	eor	r1, r1
 458:	9c 01       	movw	r18, r24
 45a:	c2 9f       	mul	r28, r18
 45c:	c0 01       	movw	r24, r0
 45e:	c3 9f       	mul	r28, r19
 460:	90 0d       	add	r25, r0
 462:	d2 9f       	mul	r29, r18
 464:	90 0d       	add	r25, r0
 466:	11 24       	eor	r1, r1
 468:	0e 94 49 02 	call	0x492	; 0x492 <SetSpeed>
	}
	LM.EncCnt_Old = LM.EncCnt;
 46c:	80 91 0f 01 	lds	r24, 0x010F
 470:	90 91 10 01 	lds	r25, 0x0110
 474:	90 93 12 01 	sts	0x0112, r25
 478:	80 93 11 01 	sts	0x0111, r24
	RM.EncCnt_Old = RM.EncCnt;
 47c:	80 91 07 01 	lds	r24, 0x0107
 480:	90 91 08 01 	lds	r25, 0x0108
 484:	90 93 0a 01 	sts	0x010A, r25
 488:	80 93 09 01 	sts	0x0109, r24
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <SetSpeed>:
void SetSpeed(int LM_Voltage,int RM_Voltage)
{
	unsigned char PVal;

	// Setup the H-bridge logic for motor direction
	PVal = PORTA;
 492:	2b b3       	in	r18, 0x1b	; 27
	// Clear current motor setting
	PVal &= ~( LEFT_FORWARD|LEFT_REVERSE|RIGHT_FORWARD|RIGHT_REVERSE);
 494:	2f 70       	andi	r18, 0x0F	; 15
	if (LM_Voltage >= 0)                  // Set motor direction
 496:	97 fd       	sbrc	r25, 7
 498:	02 c0       	rjmp	.+4      	; 0x49e <SetSpeed+0xc>
        	PVal |= LEFT_FORWARD;        // through h-bridge bits
 49a:	20 64       	ori	r18, 0x40	; 64
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <SetSpeed+0x14>
	else if (LM_Voltage < 0){
        	PVal |= LEFT_REVERSE;
 49e:	20 68       	ori	r18, 0x80	; 128
        	LM_Voltage=-LM_Voltage;               // Take the absolute value
 4a0:	90 95       	com	r25
 4a2:	81 95       	neg	r24
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
	}
	if (RM_Voltage >= 0)                  // Set motor direction
 4a6:	77 fd       	sbrc	r23, 7
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <SetSpeed+0x1c>
        	PVal |= RIGHT_FORWARD;        // through h-bridge bits
 4aa:	20 62       	ori	r18, 0x20	; 32
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <SetSpeed+0x24>
	else if (RM_Voltage < 0){
        	PVal |= RIGHT_REVERSE;
 4ae:	20 61       	ori	r18, 0x10	; 16
        	RM_Voltage=-RM_Voltage;               // Take the absolute value
 4b0:	70 95       	com	r23
 4b2:	61 95       	neg	r22
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	PORTA = PVal;
 4b6:	2b bb       	out	0x1b, r18	; 27
	if (LM_Voltage > 1023){LM_Voltage = 1023;}    // Saturation clamp 100% PWM
	if (RM_Voltage > 1023){RM_Voltage = 1023;}
	LEFT_PWM  = LM_Voltage;
 4b8:	24 e0       	ldi	r18, 0x04	; 4
 4ba:	80 30       	cpi	r24, 0x00	; 0
 4bc:	92 07       	cpc	r25, r18
 4be:	14 f0       	brlt	.+4      	; 0x4c4 <SetSpeed+0x32>
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	93 e0       	ldi	r25, 0x03	; 3
 4c4:	90 93 87 00 	sts	0x0087, r25
 4c8:	80 93 86 00 	sts	0x0086, r24
	RIGHT_PWM = RM_Voltage;
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	60 30       	cpi	r22, 0x00	; 0
 4d0:	78 07       	cpc	r23, r24
 4d2:	14 f0       	brlt	.+4      	; 0x4d8 <SetSpeed+0x46>
 4d4:	6f ef       	ldi	r22, 0xFF	; 255
 4d6:	73 e0       	ldi	r23, 0x03	; 3
 4d8:	70 93 85 00 	sts	0x0085, r23
 4dc:	60 93 84 00 	sts	0x0084, r22
}
 4e0:	08 95       	ret

000004e2 <Motor_Init>:
*   Motor initialisation, set up hardware and data structures
\****************************************************************************/

void Motor_Init(void)
{
	DDRE = 0x18;               // Set PE3 and PE4 for output (PWM)
 4e2:	88 e1       	ldi	r24, 0x18	; 24
 4e4:	82 b9       	out	0x02, r24	; 2
	DDRA = 0xF0;               // Set PortA4-7 for output (Motor direction control)
 4e6:	80 ef       	ldi	r24, 0xF0	; 240
 4e8:	8a bb       	out	0x1a, r24	; 26
	// Set up Timer3 and the output compare units for PWM 10 bits
	// Inverted PWM
	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM31) | (1 << WGM30)|(1 << COM3A0) | (1 << COM3B0); 
 4ea:	83 ef       	ldi	r24, 0xF3	; 243
 4ec:	80 93 8b 00 	sts	0x008B, r24
    	// Use divide by 1 prescaler for 15.6kHz at 10 bits;
    	// 31.2 kHz at 9 bits (too high for H Bridge);
	TCCR3B = (1 << WGM32) | (1 << CS30);
 4f0:	89 e0       	ldi	r24, 0x09	; 9
 4f2:	80 93 8a 00 	sts	0x008A, r24
 
	DDRD=0x39;	// 0011 1001   make the shaft encoder pins an input
 4f6:	89 e3       	ldi	r24, 0x39	; 57
 4f8:	81 bb       	out	0x11, r24	; 17

	EIMSK = 0x06;  // Enable interrupts int1 and int2
 4fa:	86 e0       	ldi	r24, 0x06	; 6
 4fc:	89 bf       	out	0x39, r24	; 57
	EICRA = (1<<ISC21)|(1<<ISC20)|(1<<ISC11)|(1<<ISC10);  // Triggering on leading edge int1 & int2
 4fe:	8c e3       	ldi	r24, 0x3C	; 60
 500:	80 93 6a 00 	sts	0x006A, r24
			
//  Initialise the PWM output, initially stop it from moving anywhere

	SetSpeed(0,0);
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	0e 94 49 02 	call	0x492	; 0x492 <SetSpeed>
	
}
 510:	08 95       	ret

00000512 <__divmodhi4>:
 512:	97 fb       	bst	r25, 7
 514:	09 2e       	mov	r0, r25
 516:	07 26       	eor	r0, r23
 518:	0a d0       	rcall	.+20     	; 0x52e <__divmodhi4_neg1>
 51a:	77 fd       	sbrc	r23, 7
 51c:	04 d0       	rcall	.+8      	; 0x526 <__divmodhi4_neg2>
 51e:	0c d0       	rcall	.+24     	; 0x538 <__udivmodhi4>
 520:	06 d0       	rcall	.+12     	; 0x52e <__divmodhi4_neg1>
 522:	00 20       	and	r0, r0
 524:	1a f4       	brpl	.+6      	; 0x52c <__divmodhi4_exit>

00000526 <__divmodhi4_neg2>:
 526:	70 95       	com	r23
 528:	61 95       	neg	r22
 52a:	7f 4f       	sbci	r23, 0xFF	; 255

0000052c <__divmodhi4_exit>:
 52c:	08 95       	ret

0000052e <__divmodhi4_neg1>:
 52e:	f6 f7       	brtc	.-4      	; 0x52c <__divmodhi4_exit>
 530:	90 95       	com	r25
 532:	81 95       	neg	r24
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <__udivmodhi4>:
 538:	aa 1b       	sub	r26, r26
 53a:	bb 1b       	sub	r27, r27
 53c:	51 e1       	ldi	r21, 0x11	; 17
 53e:	07 c0       	rjmp	.+14     	; 0x54e <__udivmodhi4_ep>

00000540 <__udivmodhi4_loop>:
 540:	aa 1f       	adc	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	a6 17       	cp	r26, r22
 546:	b7 07       	cpc	r27, r23
 548:	10 f0       	brcs	.+4      	; 0x54e <__udivmodhi4_ep>
 54a:	a6 1b       	sub	r26, r22
 54c:	b7 0b       	sbc	r27, r23

0000054e <__udivmodhi4_ep>:
 54e:	88 1f       	adc	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	5a 95       	dec	r21
 554:	a9 f7       	brne	.-22     	; 0x540 <__udivmodhi4_loop>
 556:	80 95       	com	r24
 558:	90 95       	com	r25
 55a:	bc 01       	movw	r22, r24
 55c:	cd 01       	movw	r24, r26
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
